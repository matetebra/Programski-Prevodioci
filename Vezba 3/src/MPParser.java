
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 17 02:41:08 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 17 02:41:08 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\003\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\006\006\000\002\006\006" +
    "\000\002\006\004\000\002\004\004\000\002\004\003\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\007\005" +
    "\000\002\007\003\000\002\007\005\000\002\010\003\000" +
    "\002\010\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\014\003\000\002\014\006\000\002\014" +
    "\006\000\002\014\005\000\002\014\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\013\012\000\002" +
    "\013\012\000\002\013\011\000\002\013\010\000\002\013" +
    "\007\000\002\013\006\000\002\013\005\000\002\013\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\006\003\005\004\006\001\002\000\004\002" +
    "\113\001\002\000\004\012\010\001\002\000\004\012\010" +
    "\001\002\000\006\003\110\027\107\001\002\000\006\003" +
    "\012\016\011\001\002\000\006\003\106\024\075\001\002" +
    "\000\012\003\ufffb\013\ufffb\026\ufffb\027\ufffb\001\002\000" +
    "\006\014\ufff9\016\ufff9\001\002\000\006\014\016\016\015" +
    "\001\002\000\010\003\074\024\075\025\033\001\002\000" +
    "\006\003\056\022\057\001\002\000\010\003\uffeb\013\uffeb" +
    "\026\uffeb\001\002\000\010\003\uffee\013\uffee\026\uffee\001" +
    "\002\000\010\003\uffec\013\uffec\026\uffec\001\002\000\010" +
    "\003\024\013\026\026\025\001\002\000\006\014\ufffa\016" +
    "\ufffa\001\002\000\012\003\ufffc\013\ufffc\026\ufffc\027\ufffc" +
    "\001\002\000\010\003\030\014\016\016\027\001\002\000" +
    "\012\003\ufffd\013\ufffd\026\ufffd\027\ufffd\001\002\000\006" +
    "\003\032\025\033\001\002\000\010\003\uffed\013\uffed\026" +
    "\uffed\001\002\000\010\003\uffef\013\uffef\026\uffef\001\002" +
    "\000\010\003\uffe8\013\uffe8\026\uffe8\001\002\000\012\003" +
    "\037\016\034\017\036\030\041\001\002\000\016\003\uffde" +
    "\013\uffde\020\uffde\021\uffde\023\uffde\026\uffde\001\002\000" +
    "\014\003\uffe0\013\uffe0\020\uffe0\021\uffe0\026\uffe0\001\002" +
    "\000\016\003\uffdd\013\uffdd\020\uffdd\021\uffdd\023\uffdd\026" +
    "\uffdd\001\002\000\010\003\uffe9\013\uffe9\026\uffe9\001\002" +
    "\000\010\003\uffea\013\uffea\026\uffea\001\002\000\006\003" +
    "\050\022\051\001\002\000\014\003\uffe7\013\uffe7\020\043" +
    "\021\044\026\uffe7\001\002\000\010\003\047\016\034\017" +
    "\036\001\002\000\006\016\034\017\036\001\002\000\014" +
    "\003\uffe1\013\uffe1\020\uffe1\021\uffe1\026\uffe1\001\002\000" +
    "\014\003\uffe2\013\uffe2\020\uffe2\021\uffe2\026\uffe2\001\002" +
    "\000\014\003\uffdf\013\uffdf\020\uffdf\021\uffdf\026\uffdf\001" +
    "\002\000\010\003\uffe3\013\uffe3\026\uffe3\001\002\000\010" +
    "\003\053\016\034\017\036\001\002\000\006\003\055\023" +
    "\054\001\002\000\010\003\uffe4\013\uffe4\026\uffe4\001\002" +
    "\000\010\003\uffe6\013\uffe6\026\uffe6\001\002\000\010\003" +
    "\uffe5\013\uffe5\026\uffe5\001\002\000\010\003\uffd5\013\uffd5" +
    "\026\uffd5\001\002\000\006\003\061\016\060\001\002\000" +
    "\006\003\063\015\062\001\002\000\010\003\uffd6\013\uffd6" +
    "\026\uffd6\001\002\000\006\003\065\016\064\001\002\000" +
    "\010\003\uffd7\013\uffd7\026\uffd7\001\002\000\006\003\067" +
    "\023\066\001\002\000\010\003\uffd8\013\uffd8\026\uffd8\001" +
    "\002\000\006\003\071\007\070\001\002\000\010\003\uffd9" +
    "\013\uffd9\026\uffd9\001\002\000\006\003\072\012\010\001" +
    "\002\000\010\003\uffda\013\uffda\026\uffda\001\002\000\010" +
    "\003\uffdb\013\uffdb\026\uffdb\001\002\000\010\003\uffdc\013" +
    "\uffdc\026\uffdc\001\002\000\014\003\uffe8\013\uffe8\014\ufff5" +
    "\016\ufff5\026\uffe8\001\002\000\014\003\101\005\103\006" +
    "\077\010\076\011\102\001\002\000\006\003\ufff4\026\ufff4" +
    "\001\002\000\006\003\ufff2\026\ufff2\001\002\000\006\003" +
    "\104\026\105\001\002\000\012\003\ufff0\014\ufff6\016\ufff6" +
    "\026\ufff0\001\002\000\006\003\ufff3\026\ufff3\001\002\000" +
    "\006\003\ufff1\026\ufff1\001\002\000\006\014\ufff7\016\ufff7" +
    "\001\002\000\006\014\ufff8\016\ufff8\001\002\000\006\014" +
    "\ufff5\016\ufff5\001\002\000\004\002\001\001\002\000\004" +
    "\002\uffff\001\002\000\004\027\112\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\006\110\001\001\000\004\006\006\001\001\000\002" +
    "\001\001\000\006\004\013\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\022" +
    "\007\021\010\017\012\020\013\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\030\012\020\013\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\037\015\041" +
    "\016\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\045\001\001\000" +
    "\004\016\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public int errNo = 0;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
			Scanner scanner = new MPLexer( file );
			MPParser parser = new MPParser( scanner );
			parser.parse();

			if (parser.errNo == 0)
			{
				System.out.println("Analiza zavrsena. U kodu nema gresaka.");
			}
			else
			{
				System.out.println("Analiza zavrsena. Broj gresaka: " + parser.errNo);
			}
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReadExpression ::= READ error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje ( .");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ReadExpression ::= READ LEFTPAR error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje ID .");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ReadExpression ::= READ LEFTPAR ID error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje kljucna rec 'in' .");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ReadExpression ::= READ LEFTPAR ID IN error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje ID .");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ReadExpression ::= READ LEFTPAR ID IN ID error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje ) .");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ReadExpression ::= READ LEFTPAR ID IN ID RIGHTPAR error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Nedostaje kljucna rec 'do'.");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ReadExpression ::= READ LEFTPAR ID IN ID RIGHTPAR DO error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Telo bloka je nekorektno.");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ReadExpression ::= READ LEFTPAR ID IN ID RIGHTPAR DO Block 
            {
              Object RESULT = null;
		
                 System.out.println( "Redukcija po smeni 22." );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimaryExpression ::= CONST 
            {
              Object RESULT = null;
		
                     System.out.println( "Redukcija po smeni 21." );
                 
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*PrimaryExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpression ::= ID 
            {
              Object RESULT = null;
		
                    System.out.println( "Redukcija po smeni 20." );
                 
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*PrimaryExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ArithmeticExpression ::= ArithmeticExpression PLUS error 
            {
              Object RESULT = null;
		
                       System.out.println("Greska u liniji " + parser.getLine() + ": " +
                            "Telo bloka je nekorektno.");
                    parser.errNo++;
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArithmeticExpression ::= PrimaryExpression 
            {
              Object RESULT = null;
		
                       System.out.println( "Redukcija po smeni 19." );
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArithmeticExpression ::= ArithmeticExpression MINUS PrimaryExpression 
            {
              Object RESULT = null;
		
                       System.out.println( "Redukcija po smeni 18." );
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArithmeticExpression ::= ArithmeticExpression PLUS PrimaryExpression 
            {
              Object RESULT = null;
		
                       System.out.println( "Redukcija po smeni 17." );
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= OPEN error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Nedostaje ( .");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= OPEN LEFTPAR error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Telo bloka je nekorektno.");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= OPEN LEFTPAR PrimaryExpression error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Nedostaje ) .");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= OPEN LEFTPAR PrimaryExpression RIGHTPAR 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 16." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= ArithmeticExpression 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 15." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assignment ::= ID error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Nedostaje = .");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignment ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Telo bloka je nekorektno.");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 14." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ReadExpression 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 13." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 12." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statements ::= Statements SEMI error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Telo bloka je nekorektno.");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statements ::= Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 11." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statements ::= Statements SEMI Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 10." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Greska u tipu.");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= FILE 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 9." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= STRING 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 8." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= CHAR 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 7." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 6." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var ::= ID error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Nedostaje : .");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Var*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var ::= ID COLON error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Greska u tipu.");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Var*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var ::= ID COLON Type error 
            {
              Object RESULT = null;
		
                   System.out.println("Greska u liniji " + parser.getLine() + ": " +
            		"Nedostaje ; .");
            	parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Var*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Var ::= ID COLON Type SEMI 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 4." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Var*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= Var 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 4." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= VarList Var 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN error 
            {
              Object RESULT = null;
		
         	System.out.println("Greska u liniji " + parser.getLine() + ": " +
         		"Telo bloka je nekorektno");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN VarList Statements error 
            {
              Object RESULT = null;
		
                System.out.println("Greska u liniji " + parser.getLine() + ": " +
         		"Nezavrsen blok (nedostaje kljucna rec 'end').");
            parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= BEGIN VarList Statements END 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 2." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= error Block RETURN 
            {
              Object RESULT = null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
         		"Nezavrsen blok (nedostaje kljucna rec 'program').");
            parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM Block error 
            {
              Object RESULT = null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " +
         		"Nezavrsen blok (nedostaje kljucna rec 'return').");
            parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM Block RETURN 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

